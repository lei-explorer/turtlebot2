// Generated by gencpp from file robot_nodes/actionRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_NODES_MESSAGE_ACTIONREQUEST_H
#define ROBOT_NODES_MESSAGE_ACTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_nodes
{
template <class ContainerAllocator>
struct actionRequest_
{
  typedef actionRequest_<ContainerAllocator> Type;

  actionRequest_()
    : block(false)
    , bumperside(0)
    , yaw(0.0)
    , yposition(0.0)
    , wall(0)
    , nan(0)  {
    }
  actionRequest_(const ContainerAllocator& _alloc)
    : block(false)
    , bumperside(0)
    , yaw(0.0)
    , yposition(0.0)
    , wall(0)
    , nan(0)  {
  (void)_alloc;
    }



   typedef uint8_t _block_type;
  _block_type block;

   typedef uint32_t _bumperside_type;
  _bumperside_type bumperside;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _yposition_type;
  _yposition_type yposition;

   typedef int32_t _wall_type;
  _wall_type wall;

   typedef int32_t _nan_type;
  _nan_type nan;





  typedef boost::shared_ptr< ::robot_nodes::actionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_nodes::actionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct actionRequest_

typedef ::robot_nodes::actionRequest_<std::allocator<void> > actionRequest;

typedef boost::shared_ptr< ::robot_nodes::actionRequest > actionRequestPtr;
typedef boost::shared_ptr< ::robot_nodes::actionRequest const> actionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_nodes::actionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_nodes::actionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_nodes::actionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_nodes::actionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_nodes::actionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_nodes::actionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_nodes::actionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_nodes::actionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_nodes::actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cbd02191233d73a2aeceb6fe421c0d5";
  }

  static const char* value(const ::robot_nodes::actionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cbd02191233d73aULL;
  static const uint64_t static_value2 = 0x2aeceb6fe421c0d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_nodes::actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_nodes/actionRequest";
  }

  static const char* value(const ::robot_nodes::actionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_nodes::actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool block\n\
uint32 bumperside\n\
float32 yaw\n\
float32 yposition\n\
int32 wall\n\
int32 nan\n\
";
  }

  static const char* value(const ::robot_nodes::actionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_nodes::actionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.block);
      stream.next(m.bumperside);
      stream.next(m.yaw);
      stream.next(m.yposition);
      stream.next(m.wall);
      stream.next(m.nan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_nodes::actionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_nodes::actionRequest_<ContainerAllocator>& v)
  {
    s << indent << "block: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block);
    s << indent << "bumperside: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bumperside);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "yposition: ";
    Printer<float>::stream(s, indent + "  ", v.yposition);
    s << indent << "wall: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wall);
    s << indent << "nan: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nan);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_NODES_MESSAGE_ACTIONREQUEST_H
