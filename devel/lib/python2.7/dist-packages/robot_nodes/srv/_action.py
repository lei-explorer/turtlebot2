# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_nodes/actionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class actionRequest(genpy.Message):
  _md5sum = "4cbd02191233d73a2aeceb6fe421c0d5"
  _type = "robot_nodes/actionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool block
uint32 bumperside
float32 yaw
float32 yposition
int32 wall
int32 nan
"""
  __slots__ = ['block','bumperside','yaw','yposition','wall','nan']
  _slot_types = ['bool','uint32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       block,bumperside,yaw,yposition,wall,nan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(actionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.block is None:
        self.block = False
      if self.bumperside is None:
        self.bumperside = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.yposition is None:
        self.yposition = 0.
      if self.wall is None:
        self.wall = 0
      if self.nan is None:
        self.nan = 0
    else:
      self.block = False
      self.bumperside = 0
      self.yaw = 0.
      self.yposition = 0.
      self.wall = 0
      self.nan = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI2f2i().pack(_x.block, _x.bumperside, _x.yaw, _x.yposition, _x.wall, _x.nan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.block, _x.bumperside, _x.yaw, _x.yposition, _x.wall, _x.nan,) = _get_struct_BI2f2i().unpack(str[start:end])
      self.block = bool(self.block)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI2f2i().pack(_x.block, _x.bumperside, _x.yaw, _x.yposition, _x.wall, _x.nan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.block, _x.bumperside, _x.yaw, _x.yposition, _x.wall, _x.nan,) = _get_struct_BI2f2i().unpack(str[start:end])
      self.block = bool(self.block)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BI2f2i = None
def _get_struct_BI2f2i():
    global _struct_BI2f2i
    if _struct_BI2f2i is None:
        _struct_BI2f2i = struct.Struct("<BI2f2i")
    return _struct_BI2f2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_nodes/actionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class actionResponse(genpy.Message):
  _md5sum = "a0c1ff9c1c60f1ec537e602d58f5a4f0"
  _type = "robot_nodes/actionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool takingphoto
bool clean
bool findingdoor
string info

"""
  __slots__ = ['takingphoto','clean','findingdoor','info']
  _slot_types = ['bool','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       takingphoto,clean,findingdoor,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(actionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.takingphoto is None:
        self.takingphoto = False
      if self.clean is None:
        self.clean = False
      if self.findingdoor is None:
        self.findingdoor = False
      if self.info is None:
        self.info = ''
    else:
      self.takingphoto = False
      self.clean = False
      self.findingdoor = False
      self.info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.takingphoto, _x.clean, _x.findingdoor))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.takingphoto, _x.clean, _x.findingdoor,) = _get_struct_3B().unpack(str[start:end])
      self.takingphoto = bool(self.takingphoto)
      self.clean = bool(self.clean)
      self.findingdoor = bool(self.findingdoor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.takingphoto, _x.clean, _x.findingdoor))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.takingphoto, _x.clean, _x.findingdoor,) = _get_struct_3B().unpack(str[start:end])
      self.takingphoto = bool(self.takingphoto)
      self.clean = bool(self.clean)
      self.findingdoor = bool(self.findingdoor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
class action(object):
  _type          = 'robot_nodes/action'
  _md5sum = '2c9f29db40e0d32cd3790aa92a5e2750'
  _request_class  = actionRequest
  _response_class = actionResponse
