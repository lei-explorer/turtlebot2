// Generated by gencpp from file robot_nodes/actionResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_NODES_MESSAGE_ACTIONRESPONSE_H
#define ROBOT_NODES_MESSAGE_ACTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_nodes
{
template <class ContainerAllocator>
struct actionResponse_
{
  typedef actionResponse_<ContainerAllocator> Type;

  actionResponse_()
    : takingphoto(false)
    , clean(false)
    , findingdoor(false)
    , info()  {
    }
  actionResponse_(const ContainerAllocator& _alloc)
    : takingphoto(false)
    , clean(false)
    , findingdoor(false)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _takingphoto_type;
  _takingphoto_type takingphoto;

   typedef uint8_t _clean_type;
  _clean_type clean;

   typedef uint8_t _findingdoor_type;
  _findingdoor_type findingdoor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::robot_nodes::actionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_nodes::actionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct actionResponse_

typedef ::robot_nodes::actionResponse_<std::allocator<void> > actionResponse;

typedef boost::shared_ptr< ::robot_nodes::actionResponse > actionResponsePtr;
typedef boost::shared_ptr< ::robot_nodes::actionResponse const> actionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_nodes::actionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_nodes::actionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_nodes

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_nodes::actionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_nodes::actionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_nodes::actionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_nodes::actionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_nodes::actionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_nodes::actionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_nodes::actionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0c1ff9c1c60f1ec537e602d58f5a4f0";
  }

  static const char* value(const ::robot_nodes::actionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0c1ff9c1c60f1ecULL;
  static const uint64_t static_value2 = 0x537e602d58f5a4f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_nodes::actionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_nodes/actionResponse";
  }

  static const char* value(const ::robot_nodes::actionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_nodes::actionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool takingphoto\n\
bool clean\n\
bool findingdoor\n\
string info\n\
\n\
";
  }

  static const char* value(const ::robot_nodes::actionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_nodes::actionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.takingphoto);
      stream.next(m.clean);
      stream.next(m.findingdoor);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_nodes::actionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_nodes::actionResponse_<ContainerAllocator>& v)
  {
    s << indent << "takingphoto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.takingphoto);
    s << indent << "clean: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clean);
    s << indent << "findingdoor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.findingdoor);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_NODES_MESSAGE_ACTIONRESPONSE_H
